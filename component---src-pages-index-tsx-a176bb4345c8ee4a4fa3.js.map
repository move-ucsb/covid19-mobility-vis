{"version":3,"sources":["webpack://my-gatsby-site/./src/contexts/mapsContext.tsx","webpack://my-gatsby-site/./src/components/index/globalMoran.tsx","webpack://my-gatsby-site/./src/components/index/globalMoranView.tsx","webpack://my-gatsby-site/./src/components/index/examples/centerMap.tsx","webpack://my-gatsby-site/./src/components/index/examples/valueMap.tsx","webpack://my-gatsby-site/./src/components/index/mapExamples.tsx","webpack://my-gatsby-site/./src/pages/index.tsx"],"names":["MapsContext","createContext","Maps","children","states","topojson","countiesMap","features","counties","Provider","value","Container","styled","Title","Plot","GlobalMoran","title","data","margin","width","height","d3Container","useRef","useEffect","svg","d3","current","append","attr","x","domain","range","call","maxY","Math","min","max","map","item","minY","y","text","line","x1","y1","Number","style","datum","d","console","log","selectAll","enter","ref","GlobalMoranView","globalData","useContext","GlobalContext","mapTitles","LisaContext","col","i","key","Map","showFDR","setShowFDR","edges","useStaticQuery","allUtahExampleCsv","translate","projection","scale","map_path","filter","id","floor","node","find","fips","class","transition","duration","onMouseOver","onMouseLeave","blues","map_g","sheltered_in_place_7days_rolling_avg","county_path","centroid","MapContainer","TextContainer","Text","useState","window","addEventListener","scrollY","selectedPage","to"],"mappings":"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","file":"component---src-pages-index-tsx-a176bb4345c8ee4a4fa3.js","sourcesContent":["import React, { createContext } from \"react\";\n\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\n\nimport countiesMap from \"us-atlas/counties-10m.json\";\n\nexport const MapsContext = createContext(null);\n\nexport const Maps = ({ children }) => {\n\n  const states = topojson.feature(countiesMap, countiesMap.objects.states).features\n  const counties = topojson.feature(countiesMap, countiesMap.objects.counties).features\n\n  return (\n    <MapsContext.Provider value={{ states, counties }}>\n      {children}\n    </MapsContext.Provider>\n  );\n};\n","import React, { useRef, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nimport * as d3 from \"d3\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Title = styled.h3`\n  margin-bottom: 0;\n`;\n\nconst Plot = styled.div`\n  height: 290px;\n  width: 370px;\n`;\n\ntype Props = {\n  title: string;\n  data: Array<number>;\n};\n\nexport default function GlobalMoran({ title, data }: Props) {\n  const margin = { top: 10, right: 20, bottom: 40, left: 50 };\n  const width = 370 - margin.left - margin.right;\n  const height = 290 - margin.top - margin.bottom;\n\n  const d3Container = useRef(null);\n\n  useEffect(() => {\n    const svg = d3\n      .select(d3Container.current)\n      .append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n    const x = d3.scaleLinear().domain([0, 52]).range([0, width]);\n    svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(0, ${height})`)\n      .call(d3.axisBottom(x));\n\n    const maxY = Math.min(Math.max(...data.map((item) => item[1])) * 1.05, 1);\n    const minY = Math.max(Math.min(...data.map((item) => item[1])) * 0.95, 0);\n\n    const y = d3.scaleLinear().domain([minY, maxY]).range([height, 0]);\n    svg.append(\"g\").call(d3.axisLeft(y));\n\n    svg\n      .append(\"text\")\n      .attr(\"x\", x(26))\n      .attr(\"y\", height + 35)\n      .text(\"Week Number\")\n      .attr(\"text-anchor\", \"middle\");\n    svg\n      .append(\"text\")\n      .attr(\"x\", - height / 2)\n      .attr(\"y\", -35)\n      .text(\"Global Moran's I Estimate\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"transform\", \"rotate(-90)\");\n\n    const line = d3\n      .line()\n      .x(({ x1 }) => x(x1))\n      .y(({ y1 }) => y(Number(y1)));\n    const lineWeek = 11;\n\n    // VERTICAL LINE:\n    svg\n      .append(\"path\")\n      .attr(\n        \"d\",\n        line([\n          { x1: lineWeek, y1: minY },\n          { x1: lineWeek, y1: maxY },\n        ])\n      )\n      .style(\"stroke\", \"gray\")\n      .style(\"stroke-width\", 2);\n\n    // LINES:\n    svg\n      .append(\"path\")\n      .datum(\n        data.map(([x1, y1]) => {\n          return { x1, y1 };\n        })\n      )\n      .style(\"stroke\", \"gray\")\n      .style(\"stroke-width\", 2)\n      .style(\"stroke-opacity\", 0.8)\n      .style(\"stroke-dasharray\", \"3, 3\")\n      .style(\"fill\", \"none\")\n      .attr(\"d\", (d) => {\n        console.log(d);\n        return line(d);\n      });\n\n    // SCATTER:\n    svg\n      .append(\"g\")\n      .selectAll(\"dot\")\n      .data(data)\n      .enter()\n      .append(\"circle\")\n      .attr(\"cx\", (d) => x(d[0]))\n      .attr(\"cy\", (d) => y(d[1]))\n      .attr(\"r\", 4.5)\n      .style(\"fill\", \"blue\")\n      .style(\"fill-opacity\", 0.7);\n  }, []);\n\n  return (\n    <Container>\n      <Title>{title}</Title>\n      <Plot ref={d3Container}></Plot>\n    </Container>\n  );\n}\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\n\nimport GlobalMoran from \"./globalMoran\";\nimport { GlobalContext } from \"../../contexts/globalContext\";\nimport { LisaContext } from \"../../contexts/lisaContext\";\n\nconst Container = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    width: 100%;\n    justify-content: space-around;\n    @media (max-width: 900px) {\n      justify-content: center;\n    }\n`;\n\nexport default function GlobalMoranView() {\n  const globalData = useContext(GlobalContext);\n  const { mapTitles } = useContext(LisaContext);\n\n  const colTitles = [\"cm\", \"cs\", \"sm\", \"ss\"];\n\n  return (\n    <Container>\n      {colTitles.map((col, i) => {\n        return (\n          <GlobalMoran\n            key={i}\n            title={mapTitles[i]}\n            data={globalData.map((item, i) => [i, item[col]])}\n          />\n        );\n      })}\n    </Container>\n  );\n}\n","import React, { useRef, useContext, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\nimport * as d3 from \"d3\";\n\nimport { MapsContext } from \"../../../contexts/mapsContext\";\n\nconst Container = styled.div`\n  width: 260px;\n  padding: 5px;\n`;\n\nconst Map = styled.svg`\n  width: 260px;\n  height: 320px;\n`;\n\ntype Props = {\n  showFDR: boolean;\n  setShowFDR: (b: boolean) => {};\n};\n\nconst CenterMap = ({ showFDR, setShowFDR }: Props) => {\n  const {\n    allUtahExampleCsv: { edges },\n  } = useStaticQuery(graphql`\n    query CenterMapQuery {\n      allUtahExampleCsv {\n        edges {\n          node {\n            class\n            fips\n          }\n        }\n      }\n    }\n  `);\n\n  const width = 260;\n  const height = 320;\n  const translate: [number, number] = [width * 2 + 210, (height * 13) / 16];\n  const scale = 3000;\n\n  const d3Container = useRef(null);\n\n  const { counties } = useContext(MapsContext);\n\n  useEffect(() => {\n    const projection = d3.geoAlbers().scale(scale).translate(translate);\n    const map_path = d3.geoPath().projection(projection);\n\n    const map_g = d3\n      .select(d3Container.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\");\n\n    // Counties:\n    map_g\n      .append(\"g\")\n      .selectAll(\"path\")\n      .data(counties.filter(({ id }) => Math.floor(id / 1000) == 49))\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", map_path as any)\n      .attr(\"id\", ({ id }) => `c${Number(id)}`)\n      //   .attr(\"countyName\", ({ properties: { name } }) => name)\n      .attr(\"class\", \"cboundary\")\n      // .style(\"stroke-width\", 0)\n      .style(\"stroke\", \"#D3D3D3\")\n      .style(\"fill\", ({ id }) => {\n        const { node } = edges.find(\n          ({ node: { fips } }) => Number(id) === Number(fips)\n        );\n        return Number(node.class) === 0 ? \"#FFFFFF00\" : \"#5768ac\";\n      })\n      .style(\"fill-opacity\", ({ id }) => {\n        const { node } = edges.find(\n          ({ node: { fips } }) => Number(id) === Number(fips) // have to convert to numbers for decimal\n        );\n        return node.class !== \"0\" ? 0.5 : 0;\n      });\n  }, []);\n\n  useEffect(() => {\n    d3.select(d3Container.current)\n      .selectAll(\".cboundary\")\n      .transition()\n      .duration(1000)\n      .style(\"fill-opacity\", ({ id }) => {\n        const { node } = edges.find(\n          ({ node: { fips } }) => Number(id) === Number(fips) // have to convert to numbers for decimal\n        );\n        return showFDR\n          ? [0, 0.5, 1][Number(node.class) / 2]\n          : Number(node.class !== \"0\") * 0.5;\n      });\n  }, [showFDR]);\n\n  return (\n    <Container>\n      <Map\n        ref={d3Container}\n        onMouseOver={() => {\n          setShowFDR(false);\n        }}\n        onMouseLeave={() => {\n          setShowFDR(true);\n        }}\n      />\n      <p>\n        Counties classified as cold spots in Cuebiq % Sheltered for Utah\n        4/13-4/19. The ligher shade of purple shows significance at alpha=0.05\n        for the simulated p-values. The darker shade of purple are the counties\n        that are significant using FDR.\n      </p>\n    </Container>\n  );\n};\n\nexport default CenterMap;\n","import React, { useRef, useContext, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\nimport * as d3 from \"d3\";\n\nimport { MapsContext } from \"../../../contexts/mapsContext\";\n\nconst Container = styled.div`\n  width: 260px;\n  padding: 5px;\n`;\n\nconst Map = styled.svg`\n  width: 260px;\n  height: 320px;\n`;\n\nconst ValueMap = () => {\n  const {\n    allUtahExampleCsv: { edges },\n  } = useStaticQuery(graphql`\n    query ValueMapQuery {\n      allUtahExampleCsv {\n        edges {\n          node {\n            sheltered_in_place_7days_rolling_avg\n            fips\n          }\n        }\n      }\n    }\n  `);\n\n  const width = 260;\n  const height = 320;\n  const translate: [number, number] = [width * 2 + 210, (height * 13) / 16];\n  const scale = 3000;\n\n  const d3Container = useRef(null);\n\n  const { counties } = useContext(MapsContext);\n\n  const blues = d3.scaleSequentialPow(d3.interpolateBlues);\n\n  useEffect(() => {\n    const projection = d3.geoAlbers().scale(scale).translate(translate);\n    const map_path = d3.geoPath().projection(projection);\n\n    const map_g = d3\n      .select(d3Container.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\");\n\n    // Counties:\n    map_g\n      .append(\"g\")\n      .selectAll(\"path\")\n      .data(counties.filter(({ id }) => Math.floor(id / 1000) == 49))\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", map_path as any)\n      .attr(\"id\", ({ id }) => `c${Number(id)}`)\n      //   .attr(\"countyName\", ({ properties: { name } }) => name)\n      .attr(\"class\", \"cboundary\")\n      // .style(\"stroke-width\", 0)\n      .style(\"stroke\", \"#D3D3D3\")\n      .style(\"fill\", ({ id }) => {\n        const { node } = edges.find(\n          ({ node: { fips } }) => Number(id) === Number(fips)\n        );\n        return blues(1 - (node.sheltered_in_place_7days_rolling_avg - 28) / 20);\n      })\n\n      \n    map_g\n      .append(\"g\")\n      .selectAll(\"label\")\n      .data(counties.filter(({ id }) => Math.floor(id / 1000) == 49))\n      .enter()\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\")\n      .text(({ id }) => {\n        const { node } = edges.find(\n          ({ node: { fips } }) => Number(id) === Number(fips)\n        );\n        return node.sheltered_in_place_7days_rolling_avg + \"%\";\n      })\n      .style(\"fill\", ({ id }) => {\n        const { node } = edges.find(\n          ({ node: { fips } }) => Number(id) === Number(fips)\n        );\n        return blues((node.sheltered_in_place_7days_rolling_avg - 10) / 25);\n      })\n      .style(\"font-size\", 12)\n      .attr(\"transform\", ({ id }) => {\n        const county_path = d3.select(`#c${id}`).datum();\n        const [x, y] = map_path.centroid(county_path)\n        return `translate(${x}, ${y + 3})`;\n      })\n  }, []);\n\n  return (\n    <Container>\n      <Map ref={d3Container} />\n      <p>\n        Cuebiq % Sheltered for Utah 4/13-4/19. Darker shades of blue indicate a\n        lower percentage of the population sheltering.\n      </p>\n    </Container>\n  );\n};\n\nexport default ValueMap;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport CenterMap from \"./examples/centerMap\";\nimport ValueMap from \"./examples/valueMap\";\nimport { Maps } from \"../../contexts/mapsContext\";\n\ninterface Props {\n  showFDR: boolean;\n  setShowFDR: (b: boolean) => {};\n}\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n  @media (max-width: 800px) {\n    justify-content: center;\n    flex-wrap: wrap;\n  }\n`;\n\nconst MapContainer = styled.div`\n  display: flex;\n\n  @media (max-width: 900px) {\n    flex-wrap: wrap;\n    justify-content: center;\n  }\n`;\nconst TextContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n  width: 100%;\n\n  & > h1 {\n    margin: 10px 15px 0 15px;\n  }\n`;\n\nconst Text = styled.p`\n  margin: 5px 15px;\n`;\nconst MapExamples = ({ showFDR, setShowFDR }: Props) => {\n  return (\n    <Container>\n      <Maps>\n        <MapContainer>\n          <TextContainer>\n            <Text>\n              Since we have determined that there is spatial association\n              (hotspots and coldspots) we can now use Local Moran’s I to find\n              which counties are the hotspots and coldspots.{\" \"}\n            </Text>\n            <Text>\n              The first accompanying figure shows %-sheltered Cuebiq measure for\n              Utah for the week 4/13-4/19. The percentage value is placed above\n              each county and counties are colored according to this value.\n              Counties with a lower value are colored a darker blue while\n              counties with greater values are lighter. This plot shows what it\n              means to be a cold spot; in the center of the state, we see lower\n              percentages (darker counties) clustered together.\n            </Text>\n            <Text>\n              The next plot of Utah shows the results after running the Local\n              Moran test. Counties that are significant coldspots after running\n              the Local Moran test are given a color. The significance test that\n              is used to determine whether the counties are coldspots is based\n              on permutations of values that result in simulated p-values. We\n              then use the False Discovery Rate (FDR) in order to reduce the\n              number of false positives from this simulation. The counties that\n              are significant after the FDR are colored a darker purple and\n              these counties represent the centers of our coldspots.\n            </Text>\n          </TextContainer>\n          <ValueMap />\n          <CenterMap showFDR={showFDR} setShowFDR={setShowFDR} />\n        </MapContainer>\n      </Maps>\n    </Container>\n  );\n};\n\nexport default MapExamples;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"gatsby\";\n\nimport Page from \"../components/page\";\n\nimport GlobalMoranView from \"../components/index/globalMoranView\";\nimport MapExamples from \"../components/index/mapExamples\";\n{\n  /* <Trivariate\n      data={[\n        format(cue_mobility),\n        format(cue_sheltered),\n        format(safe_mobility),\n        format(safe_sheltered),\n      ]}\n    /> */\n}\n\nimport dates from \"../data/dates.json\";\n\nconst TextContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n  width: 100%;\n\n  & > h1 {\n    margin: 30px 15px 0 15px;\n  }\n\n  & > h1:nth-child(1) {\n    margin-top: 10px;\n  }\n`;\n\nconst Text = styled.p`\n  margin: 5px 15px;\n`;\n\nconst Index = () => {\n  const [showFDR, setShowFDR] = useState(false);\n\n  useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      window.addEventListener(\"scroll\", () => {\n        return setShowFDR(window.scrollY > 500);\n      });\n    }\n  }, []);\n\n  return (\n    <Page selectedPage=\"About\">\n      <TextContainer>\n        <h1>About This Website</h1>\n        <Text>\n          This website presents three different ways to compare the spatial\n          structures of different mobility measures over a period of time. The{\" \"}\n          <Link to=\"/animated\">Animated Choropleth Maps</Link> page allows you\n          to either play an animation or step through individual weeks to see\n          the spatial structure of our different measures in those weeks. The{\" \"}\n          <Link to=\"/interactive\"> Interactive Maps</Link> page shows the\n          temporal aspects of this animation in a single single view. The{\" \"}\n          <Link to=\"/scatter\">Scatter Plots</Link> page shows the same points as\n          on our Interactive Maps, just without the spatial aspect to see a\n          different view of the same information.\n        </Text>\n        <h1>Data</h1>\n        <Text>\n          We have two data sources, Safegraph and Cuebiq, and two variables from\n          each source. One variable is a measure of the distance traveled for\n          people in a county, the other is a measure of the percentage of people\n          in the county that are staying at home. We then computed weekly\n          averages of these variables on the county level for each week in 2020.\n        </Text>\n        <h1>Global Moran's I</h1>\n        <Text>\n          We can use the Global Moran's I to test for spatial association\n          between counties. Below are four plots for each data source and\n          variable which show the test statistic of Global Moran's I, calculated\n          for each week in 2020. All of these values are positive and\n          significant which indicates that there is spatial association every\n          week for each variable. This means that we generally see high valued\n          counties next to other high valued counties (hotspots) and low valued\n          counties next to other low valued counties (coldspots).\n        </Text>\n        <GlobalMoranView />\n        <Text>\n          The vertical lines in the plots show the week that COVID-19 was\n          declared a pandemic by the World Health Organization.\n        </Text>\n        <h1>Local Moran's I</h1>\n        <MapExamples showFDR={showFDR} setShowFDR={setShowFDR} />\n        {/* \n        <Text>The about page is still under construction. Please see one of the individual visualization pages.</Text>\n        <ul>\n          <li><Link to=\"/animated\"><h2>Animated Choropleth Maps</h2></Link></li>\n          <li><Link to=\"/static\"><h2>Static Choropleth Maps</h2></Link></li>\n          <li><Link to=\"/scatter\"><h2>Scatter Plot Representations</h2></Link></li>\n        </ul>*/}\n      </TextContainer>\n    </Page>\n  );\n};\n\nexport default Index;\n"],"sourceRoot":""}